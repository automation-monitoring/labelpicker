#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# SPDX-FileCopyrightText: Â© 2023 PL Automation Monitoring GmbH <pl@automation-monitoring.com>
# SPDX-License-Identifier: GPL-3.0-or-later
# This file is part of the Checkmk Labelpicker project (https://labelpicker.mk)
# Inspired by Robert Sander's tool: data2label

import labelpicker.labelpicker_base as lpb
from labelpicker.labelpicker_base import bcolor
from labelpicker.labelpicker_base import Config

import pprint
import argparse
import sys
import importlib


def parse_args():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i",
        "--init",
        action="store_true",
        help="Initialize label picker default configuration",
    )
    parser.add_argument("-u", "--username", help="Name of the automation user")
    parser.add_argument("-p", "--password", help="Secret of the automation user")
    parser.add_argument("-c", "--config", default=True, help="Path to config file")
    parser.add_argument(
        "--debug", action="store_true", help="Enable debug mode", default=False
    )
    parser.add_argument(
        "-t",
        "--testmode",
        action="store_true",
        help="Testmode - no config changes will be applied",
    )
    parser.add_argument(
        "--cleanup",
        action="store_true",
        help="Cleanup / Refresh all labels with known prefix (ignore case)",
    )
    return parser.parse_args()


def print_err(msg):
    print(msg, file=sys.stderr)
    sys.exit(1)


if __name__ == "__main__":
    args = parse_args()
    bc = bcolor()
    h1_suffix = ""
    if args.testmode:
        h1_suffix = " - testmode "
    print(bc.h1(__file__.split("/")[-1] + h1_suffix))

    config_inst = Config(args.config)
    if args.init:
        config_inst.init_cfg()

    config = config_inst.get_cfg()

    try:
        wato = lpb.CMKInstance()
    except Exception as e:
        print_err(
            f"ðŸ”´ Error connecting to Checkmk site via REST API!\n --> Site started and apache running?"
        )
        sys.exit(1)
    # Datasources must be placed as python modules
    # ~/local/lib/python3/labelpicker/ds_plugins/

    for strategy in config["datasources"].keys():
        print(bc.h2(f"Datasource: {strategy}"))
        strategy_config = config["datasources"][strategy]
        # if pymodule name is set, use it instead of strategy name
        ds_module = strategy_config.get("module") or strategy
        try:
            # Import & load datasource module
            datasource_module = importlib.import_module(
                f"labelpicker.ds_plugins.{ds_module}"
            )
            datasource_class = getattr(datasource_module, ds_module)
            label_processor = lpb.LableDataProcessor(datasource_class())

        except ImportError:
            # Handle import error
            print(f"ðŸ”´ Error importing datasource {ds_module}")
            continue

        # Get source data, return can be different for each strategy, but must be considered in the process algorithm
        source_data = label_processor.get(**strategy_config)
        print(f"Source data: {sys.getsizeof(str(source_data))} Bytes")
        # Process source data and create label definitions
        label_definitions = label_processor.process(source_data, **strategy_config)
        print(f"Label definitions for {len(label_definitions)} hosts")

        # Optional case conversion of labels
        prefix = strategy_config["label_prefix"]
        case_conversion_method = strategy_config.get("case_conversion") or config.get(
            "case_conversion"
        )
        if case_conversion_method:
            label_definitions = lpb.case_conversion(
                label_definitions, case_conversion_method, prefix
            )

        # Apply label definitions to checkmk instance
        changes = False
        statistics = {"hosts_in_cmk": [], "hosts_not_in_cmk": []}
        cmk_all_hosts = wato.get_all_hosts()
        for host in label_definitions:
            if host in cmk_all_hosts:
                statistics["hosts_in_cmk"].append(host)
                # Try to get current labels from cmk_all_hosts if key label does not exist, expect no labels defined and return empty dict
                # All other KeyError will be catched and data structure will be logged
                try:
                    current_labels = cmk_all_hosts[host]["attributes"].get("labels", {})
                except KeyError:
                    pprint.pprint(cmk_all_hosts[host])
                    continue
                # Call update labels function (orig_labels, labels, label_prefix)
                # Returns dict with updated labels
                if args.cleanup:
                    updated_labels = wato.update_labels(
                        current_labels,
                        label_definitions[host],
                        strategy_config["label_prefix"],
                        # honor purge parameter
                        enforce_cleanup=True,
                    )
                else:
                    updated_labels = wato.update_labels(
                        current_labels,
                        label_definitions[host],
                        strategy_config["label_prefix"],
                    )
                if current_labels != updated_labels:
                    changes = True
                    if not args.testmode:
                        wato.set_hostlabels(host, updated_labels)
                        print(f"Labels for host {host} updated")
                    else:
                        print(f"Labels for host {host} will be updated")
            else:
                statistics["hosts_not_in_cmk"].append(host)
                continue

        if statistics["hosts_not_in_cmk"]:
            print(f"ðŸŸ¡ {len(statistics['hosts_not_in_cmk'])} Hosts NOT in Checkmk")
        else:
            print(f"ðŸŸ¢ {len(statistics['hosts_in_cmk'])} (all) Hosts in Checkmk")

        if not args.testmode and changes:
            afc = "activate_foreign_changes"
            if afc in config and config[afc]:
                ret = wato.activate(force=True)
            else:
                ret = wato.activate()
            try:
                if ret["title"].startswith("Activation"):
                    print(f"ðŸŸ¢ Activate changes")
            except Exception:
                print(f"ðŸ”º Activate changes failed")
                pprint.pprint(ret)
